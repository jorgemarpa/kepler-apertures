{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kepler-Apertures Aperture Photometry with Kepler's PRFs Tools to create aperture mask for Kepler sources using PRF models build from Kepler's Full Frame Images. Installation pip install kepler-apertures What's happening? kepler-apertures does the following: Creates PRF models from Kepler's FFIs. Uses PRF models to compute photometric apertures and flux metrics. Creates SAP light curves for more than 9,300 Gaia sources observed in Kepler's EXBA masks. Also, kepler-apertures , allows you to compute your own PRF models and use them to find new apertures mask. What does it look like? PRF models We created PRF models using Kepler's FFI which contains ~10k Gaia EDR3 sources per Kepler's channel. The following figure shows the PRF models in the focal plane. Channels at the border show PRFs with very distorted shapes, while in the center these are round and smooth. Later this PRF models are used to compute apertures photometry. Kepler's EXBA masks The EXBA masks are custom apertures observed by Kepler's first mission, they cover relatively dark regions of the Kepler field and were observed continuously between quarters 4 and 17. The scientific motivation to collect these data was to obtain an unbiased characterization of the eclipsing binary occurrence fraction in the Kepler field. Here an example of the full EXBA mask observed in quarter 5 with channel 48 EXBA Light Curves Here two examples of light curves produced with kepler-apertures of sources found in the EXBA mask What can I use it on? Example use For how to use kepler-apertures see the notebook tutorials. Funding for this project is provided by NASA ROSES grant number 80NSSC20K0874.","title":"Home"},{"location":"#kepler-apertures","text":"Aperture Photometry with Kepler's PRFs Tools to create aperture mask for Kepler sources using PRF models build from Kepler's Full Frame Images.","title":"Kepler-Apertures"},{"location":"#installation","text":"pip install kepler-apertures","title":"Installation"},{"location":"#whats-happening","text":"kepler-apertures does the following: Creates PRF models from Kepler's FFIs. Uses PRF models to compute photometric apertures and flux metrics. Creates SAP light curves for more than 9,300 Gaia sources observed in Kepler's EXBA masks. Also, kepler-apertures , allows you to compute your own PRF models and use them to find new apertures mask.","title":"What's happening?"},{"location":"#what-does-it-look-like","text":"","title":"What does it look like?"},{"location":"#prf-models","text":"We created PRF models using Kepler's FFI which contains ~10k Gaia EDR3 sources per Kepler's channel. The following figure shows the PRF models in the focal plane. Channels at the border show PRFs with very distorted shapes, while in the center these are round and smooth. Later this PRF models are used to compute apertures photometry.","title":"PRF models"},{"location":"#keplers-exba-masks","text":"The EXBA masks are custom apertures observed by Kepler's first mission, they cover relatively dark regions of the Kepler field and were observed continuously between quarters 4 and 17. The scientific motivation to collect these data was to obtain an unbiased characterization of the eclipsing binary occurrence fraction in the Kepler field. Here an example of the full EXBA mask observed in quarter 5 with channel 48","title":"Kepler's EXBA masks"},{"location":"#exba-light-curves","text":"Here two examples of light curves produced with kepler-apertures of sources found in the EXBA mask","title":"EXBA Light Curves"},{"location":"#what-can-i-use-it-on","text":"","title":"What can I use it on?"},{"location":"#example-use","text":"For how to use kepler-apertures see the notebook tutorials. Funding for this project is provided by NASA ROSES grant number 80NSSC20K0874.","title":"Example use"},{"location":"EXBAMachine/","text":"Documentation for KeplerFFI Class that works with Kepler's EXBA data, to identify observed sources using Gaia catalogs, and create light curves from simple aperture photometry. __init__ ( self , channel = 53 , quarter = 5 , magnitude_limit = 20 , gaia_dr = 3 ) special Parameters: Name Type Description Default channel int Channel number of the EXBA image. 53 quarter int Quarter number of the EXBA image. 5 magnitude_limit float Limiting magnitude in g band used when querying Gaia catalogs, default is 20 mag. 20 gaia_dr int Gaia data release, dafult is EDR3. 3 Attributes: Name Type Description quarter int Channel number of the EXBA image. channel int Quarter number of the EXBA image. gaia_dr int Gaia data release, dafult is EDR3. tpfs lightkurve.TargetPixelFileCollection Collection of 4 TPFs that form the full EXBA mask. time numpy.ndarray Data array containing the time values. cadences numpy.ndarray Data array containing the cadence numbers. row numpy.ndarray Data array containing the valid pixel row numbers. Has shape of [n_pixels]. column numpy.ndarray Data array containing the valid pixel columns numbers. Has shape of [n_pixels]. flux numpy.ndarray Data array containing the valid image fluxes. Has shape of [n_times, n_pixels]. flux_err numpy.ndarray Data array containing the valid image flux errors. Has shape of [n_times, n_pixels]. ra numpy.ndarray Data array containing the valid RA pixel values. Has shape of [n_pixels]. dec numpy.ndarray Data array containing the valid Dec pixel values. Has shape of [n_pixels]. dx numpy.ndarray Distance between pixel and source coordinates, units of pixels. Has shape of [n_sources, n_pixels] dy numpy.ndarray Distance between pixel and source coordinates, units of pixels. Has shape of [n_sources, n_pixels] r numpy.ndarray Radial distance between pixel and source coordinates (polar coordinates), in units of pixels. phi numpy.ndarray Angle between pixel and source coordinates (polar coordinates), in units of radians n_sources int Number of sources in Gaia catalog observed in the EXBA mask. n_rows int Number rows in the EXBA image. n_columns int Number columns in the EXBA image. aperture_mask numpy.ndarray Data array with the source aperture masks. Has shape of [n_sources, n_pixels] FLFRCSAP numpy.array Data array with the completeness metric for every source computed from the photometric aperture. CROWDSAP numpy.array Data array with the contamination metric for every source computed from the photometric aperture. _clean_source_list ( self , sources , ra , dec ) private Function to clean surces from the catalog removing sources outside the image coverage (allowing for sources up to 4\" outside the mask), and to remove blended sources (within 2\"). Parameters: Name Type Description Default sources pandas.DataFrame Catalog with sources to be removed required ra numpy.ndarray Data array with values of RA for every pixel in the image. required dec numpy.ndarray Data array with values of Dec for every pixel in the image. required Returns: Type Description pandas.DataFrame Clean catalog _convert_to_wcs ( self , tpfs , row , col ) private Function to convert pixel number to RA and Dec values using the WCS solution embedded in the TPFs. Parameters: Name Type Description Default tpfs list of TPFs or TargetPixelFileCollection A list of TPFs that contain the EXBA tiles. required row numpy.ndarray Data aray with the row pixel values to be converted to RA & Dec. required col numpy.ndarray Data aray with the column pixel values to be converted to RA & Dec. required Returns: Type Description numpy.ndarray Right Ascension coordinate obtained from the WCS solution. _do_query ( self , ra , dec , epoch = 2020 , magnitude_limit = 20 , load = True ) private Calculate ra, dec coordinates and search radius to query Gaia catalog. Parameters: Name Type Description Default ra numpy.ndarray Right ascension coordinate of pixels to do Gaia search required dec numpy.ndarray Declination coordinate of pixels to do Gaia search required epoch float Epoch of obervation in Julian Days of ra, dec coordinates, will be used to propagate proper motions in Gaia. 2020 magnitude_limit int Limiting magnitued for query 20 load boolean Load or not the saved query. Set to False if want to force to run new queries. True Returns: Type Description pandas.DataFrame Catalog with query result _parse_TPFs_channel ( self , tpfs ) private Function to parse the TPFs containing the EXBA masks (4 per channel) and tile them. Parameters: Name Type Description Default tpfs list of TPFs or TargetPixelFileCollection A list of TPFs that contain the 4 EXBA mask per channel. required Returns: Type Description numpy.ndarray Data array containing the time values. _preprocess ( self , times , cadences , flux , flux_err ) private Function to clean pixels with nan values and bad cadences. It Returns the same input arrays but cleaned. Parameters: Name Type Description Default times numpy.ndarray Data array with the time values. required cadences numpy.ndarray Data array with the cadence numbers. required flux numpy.ndarray Data array with the image flux. required flux_err numpy.ndarray Data array with the image flux errors. required Returns: Type Description numpy.ndarray Data array with the time values. apply_CBV ( self , do_under = False , plot = True ) Applies CBV corrections to all the light curves in self.lcs . It optimizes the alpha parameter for each correction, if optimization fails, uses the alpha value calculated for previous light curve. It creates class attributes to access the CBV-corrected light curves, and under/over fitting metrics. Parameters: Name Type Description Default do_under boolean Compute or not the under-fitting metric for the CBV correction. False plot boolean Plot or not CBVcorrector diagnostic figures. True create_lcs ( self , aperture_mask ) Funciton to create lightkurve.LightCurve with the light curves using aperture photometry. It creates a class attribute self.lcs that is a lk.LightCurveCollection with the light curves of all input sources. Parameters: Name Type Description Default aperture_mask numpy.ndarray Boolean mask of shape [n_sources, n_pixels] that has the aperture mask to be used to compute photometry for a set of sources. required do_photometry ( self , aperture_mask ) Function to do aperture photometry on a set of sources. It creates/update class attributes that contains the SAP flux, errors, and aperture masks. Parameters: Name Type Description Default aperture_mask numpy.ndarray Boolean mask of shape [n_sources, n_pixels] that has the aperture mask to be used to compute photometry for a set of sources. required download_exba ( channel = 1 , quarter = 5 ) staticmethod Download EXBA fits file to a dedicated quarter/channel directory It uses a exba_tpfs_info.csv to map the quarter/channel to the corresponding file names in MAST archive. Parameters: Name Type Description Default channel int Number of channel to be download, valid numbers are bwtween 1 and 84. 1 quarter int Number of quarter to be download, valid numbers are bwtween 1 and 17. 5 image_to_fits ( self , path = None , overwrite = False ) Creates a FITS file that contains the time-average imagege of the EXBA mask in a ImageHDU, and the source catalog in a BinTableHDU. Parameters: Name Type Description Default path string Directory path where to save the FITS file. None overwrite bool Overwrite the output file. False Returns: Type Description ImageHDU An Image header unit containing the EXBA flux. plot_image ( self , frame = 0 , sources = True , ax = None ) Function to plot the full EXBA image and the Gaia Sources. Parameters: Name Type Description Default frame int Frame number. The default is 0, i.e. the first frame. 0 sources boolean Whether to overplot or not the source catalog True ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None Returns: Type Description matplotlib.axes Matlotlib axis with the figure plot_lightcurve ( self , source_idx = 0 , ax = None ) Creates a figure with the light curve of a given source. mask. Parameters: Name Type Description Default source_idx int Index of the source in self.sources catalog to be plotted. 0 ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned. None Returns: Type Description matplotlib.axes Matlotlib axis with the figure plot_stamp ( self , source_idx = 0 , aperture_mask = False , ax = None ) Creates a figure with the \"stamp\" image of a given source and its aperture mask. Parameters: Name Type Description Default source_idx int Index of the source in self.sources catalog to be plotted. 0 aperture_mask boolean Plot or not the aperutre mask. False ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned. None Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"EXBAMachine"},{"location":"EXBAMachine/#documentation-for-keplerffi","text":"Class that works with Kepler's EXBA data, to identify observed sources using Gaia catalogs, and create light curves from simple aperture photometry.","title":"Documentation for KeplerFFI"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.__init__","text":"Parameters: Name Type Description Default channel int Channel number of the EXBA image. 53 quarter int Quarter number of the EXBA image. 5 magnitude_limit float Limiting magnitude in g band used when querying Gaia catalogs, default is 20 mag. 20 gaia_dr int Gaia data release, dafult is EDR3. 3 Attributes: Name Type Description quarter int Channel number of the EXBA image. channel int Quarter number of the EXBA image. gaia_dr int Gaia data release, dafult is EDR3. tpfs lightkurve.TargetPixelFileCollection Collection of 4 TPFs that form the full EXBA mask. time numpy.ndarray Data array containing the time values. cadences numpy.ndarray Data array containing the cadence numbers. row numpy.ndarray Data array containing the valid pixel row numbers. Has shape of [n_pixels]. column numpy.ndarray Data array containing the valid pixel columns numbers. Has shape of [n_pixels]. flux numpy.ndarray Data array containing the valid image fluxes. Has shape of [n_times, n_pixels]. flux_err numpy.ndarray Data array containing the valid image flux errors. Has shape of [n_times, n_pixels]. ra numpy.ndarray Data array containing the valid RA pixel values. Has shape of [n_pixels]. dec numpy.ndarray Data array containing the valid Dec pixel values. Has shape of [n_pixels]. dx numpy.ndarray Distance between pixel and source coordinates, units of pixels. Has shape of [n_sources, n_pixels] dy numpy.ndarray Distance between pixel and source coordinates, units of pixels. Has shape of [n_sources, n_pixels] r numpy.ndarray Radial distance between pixel and source coordinates (polar coordinates), in units of pixels. phi numpy.ndarray Angle between pixel and source coordinates (polar coordinates), in units of radians n_sources int Number of sources in Gaia catalog observed in the EXBA mask. n_rows int Number rows in the EXBA image. n_columns int Number columns in the EXBA image. aperture_mask numpy.ndarray Data array with the source aperture masks. Has shape of [n_sources, n_pixels] FLFRCSAP numpy.array Data array with the completeness metric for every source computed from the photometric aperture. CROWDSAP numpy.array Data array with the contamination metric for every source computed from the photometric aperture.","title":"__init__()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine._clean_source_list","text":"Function to clean surces from the catalog removing sources outside the image coverage (allowing for sources up to 4\" outside the mask), and to remove blended sources (within 2\"). Parameters: Name Type Description Default sources pandas.DataFrame Catalog with sources to be removed required ra numpy.ndarray Data array with values of RA for every pixel in the image. required dec numpy.ndarray Data array with values of Dec for every pixel in the image. required Returns: Type Description pandas.DataFrame Clean catalog","title":"_clean_source_list()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine._convert_to_wcs","text":"Function to convert pixel number to RA and Dec values using the WCS solution embedded in the TPFs. Parameters: Name Type Description Default tpfs list of TPFs or TargetPixelFileCollection A list of TPFs that contain the EXBA tiles. required row numpy.ndarray Data aray with the row pixel values to be converted to RA & Dec. required col numpy.ndarray Data aray with the column pixel values to be converted to RA & Dec. required Returns: Type Description numpy.ndarray Right Ascension coordinate obtained from the WCS solution.","title":"_convert_to_wcs()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine._do_query","text":"Calculate ra, dec coordinates and search radius to query Gaia catalog. Parameters: Name Type Description Default ra numpy.ndarray Right ascension coordinate of pixels to do Gaia search required dec numpy.ndarray Declination coordinate of pixels to do Gaia search required epoch float Epoch of obervation in Julian Days of ra, dec coordinates, will be used to propagate proper motions in Gaia. 2020 magnitude_limit int Limiting magnitued for query 20 load boolean Load or not the saved query. Set to False if want to force to run new queries. True Returns: Type Description pandas.DataFrame Catalog with query result","title":"_do_query()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine._parse_TPFs_channel","text":"Function to parse the TPFs containing the EXBA masks (4 per channel) and tile them. Parameters: Name Type Description Default tpfs list of TPFs or TargetPixelFileCollection A list of TPFs that contain the 4 EXBA mask per channel. required Returns: Type Description numpy.ndarray Data array containing the time values.","title":"_parse_TPFs_channel()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine._preprocess","text":"Function to clean pixels with nan values and bad cadences. It Returns the same input arrays but cleaned. Parameters: Name Type Description Default times numpy.ndarray Data array with the time values. required cadences numpy.ndarray Data array with the cadence numbers. required flux numpy.ndarray Data array with the image flux. required flux_err numpy.ndarray Data array with the image flux errors. required Returns: Type Description numpy.ndarray Data array with the time values.","title":"_preprocess()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.apply_CBV","text":"Applies CBV corrections to all the light curves in self.lcs . It optimizes the alpha parameter for each correction, if optimization fails, uses the alpha value calculated for previous light curve. It creates class attributes to access the CBV-corrected light curves, and under/over fitting metrics. Parameters: Name Type Description Default do_under boolean Compute or not the under-fitting metric for the CBV correction. False plot boolean Plot or not CBVcorrector diagnostic figures. True","title":"apply_CBV()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.create_lcs","text":"Funciton to create lightkurve.LightCurve with the light curves using aperture photometry. It creates a class attribute self.lcs that is a lk.LightCurveCollection with the light curves of all input sources. Parameters: Name Type Description Default aperture_mask numpy.ndarray Boolean mask of shape [n_sources, n_pixels] that has the aperture mask to be used to compute photometry for a set of sources. required","title":"create_lcs()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.do_photometry","text":"Function to do aperture photometry on a set of sources. It creates/update class attributes that contains the SAP flux, errors, and aperture masks. Parameters: Name Type Description Default aperture_mask numpy.ndarray Boolean mask of shape [n_sources, n_pixels] that has the aperture mask to be used to compute photometry for a set of sources. required","title":"do_photometry()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.download_exba","text":"Download EXBA fits file to a dedicated quarter/channel directory It uses a exba_tpfs_info.csv to map the quarter/channel to the corresponding file names in MAST archive. Parameters: Name Type Description Default channel int Number of channel to be download, valid numbers are bwtween 1 and 84. 1 quarter int Number of quarter to be download, valid numbers are bwtween 1 and 17. 5","title":"download_exba()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.image_to_fits","text":"Creates a FITS file that contains the time-average imagege of the EXBA mask in a ImageHDU, and the source catalog in a BinTableHDU. Parameters: Name Type Description Default path string Directory path where to save the FITS file. None overwrite bool Overwrite the output file. False Returns: Type Description ImageHDU An Image header unit containing the EXBA flux.","title":"image_to_fits()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.plot_image","text":"Function to plot the full EXBA image and the Gaia Sources. Parameters: Name Type Description Default frame int Frame number. The default is 0, i.e. the first frame. 0 sources boolean Whether to overplot or not the source catalog True ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"plot_image()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.plot_lightcurve","text":"Creates a figure with the light curve of a given source. mask. Parameters: Name Type Description Default source_idx int Index of the source in self.sources catalog to be plotted. 0 ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned. None Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"plot_lightcurve()"},{"location":"EXBAMachine/#kepler_apertures.EXBAMachine.EXBAMachine.plot_stamp","text":"Creates a figure with the \"stamp\" image of a given source and its aperture mask. Parameters: Name Type Description Default source_idx int Index of the source in self.sources catalog to be plotted. 0 aperture_mask boolean Plot or not the aperutre mask. False ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned. None Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"plot_stamp()"},{"location":"KeplerFFI/","text":"Documentation for KeplerFFI Class for loading Kepler's FFI files and compute PRF models out of them following the method discussed in Hedges et al. 2021 and Martinez-Palomera et al. 2021. __init__ ( self , ffi_name = '' , channel = 1 , quarter = None , plot = True , save = True ) special Initialization of the KeplerFFI class Parameters: Name Type Description Default ffi_name str Name of the FFI file used to model the PRF profile. Either ffi_name or quarter can be provided. '' channel int Channel number of the FFI to be used to model the PRF. Valid values are between 1 and 84. 1 quarter int Number of the quarter that will be used to model the PRF. Either ffi_name or quarter can be provided, if quarter is provided, then all FFI files observed during the time window of that quarter will be used to model the PRF by averaging the images. Valid values are between 1 and 17. None plot bool Whether to clreate diagnostic plots or not. True save bool Whether to save the models or not. True Attributes: Name Type Description channel int Number of the quarter that will be used to model the PRF. quarter int Channel number of the FFI to be used to model the PRF. plot bool Boolean to create diagnostic plots. save bool Boolean to save models and figures. hdr dict Header dictionary of the FFI file. img numpy.ndarray Original FFI flux image in electros / sec. wcs astropy.WCS Object with the WCS solution of the image. col_2d numpy.ndarray Data array with the pixel column number in 2D row_2d numpy.ndarray Data array with the pixel row number in 2D ra_2d numpy.ndarray Data array with the pixel Right Ascension value in 2D, in degs dec_2d numpy.ndarray Data array with the pixel Declination value in 2D, in degs flux_2d numpy.ndarray Data array with the flux value of each pixel with substracted background in 2D, in electros / sec. sources pandas.DataFrame Catalog with Gaia sources observed in the image, after cleaning. flux numpy.ndarray Data array with the flux value of each pixel with substracted background in 1D after removing saturated & bright pixels. in electros / sec. flux_err numpy.ndarray Data array with the flux error value of each pixel with substracted background in 1D after removing saturated & bright pixels. in electros / sec. col numpy.ndarray Data array with the pixel column number in 1D after removing saturated & bright pixels row numpy.ndarray Data array with the pixel row number in 1D after removing saturated & bright pixels nsurces int Total number of sources observed in the image after cleaning. npixels int Total number of pixels in the image gf numpy.ndarray Data array with the Gaia flux value for every source. dflux scipy.sparse.csr_matrix Sparse matrix with pixel flux value within r < 7 pixels of the source coordinates. Has shape [nsources , npixels] dx scipy.sparse.csr_matrix Sparse matrix with distance between the pixel within r < 7 pixels and the source location, in pixel units. Has shape [nsources , npixels] dy scipy.sparse.csr_matrix Sparse matrix with distance between the pixel within r < 7 pixels and the source location, in pixel units. Has shape [nsources , npixels] r scipy.sparse.csr_matrix Sparse matrix with radial distance between pixels within r < 7 and the source location, in polar coordinates. Has shape [nsources , npixels] phi scipy.sparse.csr_matrix Sparse matrix with angle value of pixels within r < 7 and the source location, in polar coordinates. Has shape [nsources , npixels] _build_prf_shape ( self , n_r_knots = 10 , n_phi_knots = 12 , cut_r = 6 , flux_cut_off = 1 ) private Builds a sparse model matrix of shape nsources x npixels to be used when fitting each source pixels to estimate its PSF photometry Parameters: Name Type Description Default n_r_knots int Number of radial knots in the spline model. 10 n_phi_knots int Number of azimuthal knots in the spline model. 12 cut_r int Distance at which the spline Design matrix has only dependency in the radial axis. 6 flux_cut_off float The flux in COUNTS at which to stop evaluating the model. 1 _clean_source_list ( self , sources ) private Function to clean surces from the catalog removing sources near the borders, with 10 pixel tolerance, and to remove blended sources (within 8\") Parameters: Name Type Description Default sources pandas.DataFrame Catalog with sources to be removed required Returns: Type Description pandas.DataFrame Clean catalog _create_sparse ( self ) private Function to create sparse matrces (scipy.sparse.csr_matrix) for variables: dx, dy, dflux, dfluxerr, r, and phy This is extremelly necessary for FFI due to the large number of sources (~10k) and pixels (~1.1M). The sparse matrices contain the pixel data around the sources up to 7 pixels distance from the object location. _do_big_query ( self , ra , dec , epoch ) private Query Gaia catalogs (EDR3 default) to obtain sources observed in the FFI. If query finishs ok, result will be saved for future use in the following directory: ../data/catalogs/ffi/ /channel_ _gaia_xmatch.csv It does nx*ny small queries to avoid TimeoutError that might happen when doing large (rad > 0.7 deg) queries to Gaia archive. The ouput file has unique objects. Parameters: Name Type Description Default ra list Value of the Right Ascension coordinate used for the query, in deg. required dec list Value of the Declination coordinate used for the query, in deg. required epoch float Year of the observation (Julian year) used for proper motion correction. required Returns: Type Description pandas.DataFrame Clean catalog _get_mean_model ( self ) private Convenience function to make the scene PRF model _get_source_mask ( self , upper_radius_limit = 7 , lower_radius_limit = 1.1 , flux_cut_off = 300 , dm_type = 'rf-quadratic' , plot = False ) private Find the pixel mask that identifies pixels with contributions from ANY NUMBER of Sources. Fits a simple polynomial model to the log of the pixel flux values, in radial dimension and source flux, to find the optimum circular apertures for every source. Parameters: Name Type Description Default upper_radius_limit float The radius limit at which we assume there is no flux from a source of any brightness (arcsec). 7 lower_radius_limit float The radius limit at which we assume there is flux from a source of any brightness (arcsec). 1.1 flux_cut_off float The flux at which we assume a source is too faint to model 300 dm_type string Type of design matrix to be used for modeling. Default is rf-quadratic , which is quadratic in both radius and flux. 'rf-quadratic' plot bool Whether to show diagnostic plot. Default is False. False _get_uncontaminated_source_mask ( self ) private creates a mask of shape nsources x npixels where targets are not contaminated. This mask is used to select pixels to build the PSF model. _mask_bright_sources ( self , flux , column , row , sources , mag_limit = 10 ) private Finds and removes halos produced by bright stars (<10 mag) Parameters: Name Type Description Default flux numpu.ndarray Data array with pixel flux value required column numpy.ndarray Data array with pixel column value required row numpy.ndarray Data array with pixel row value required sources pandas.DataFrame Catalog wih observed sources in the image required mag_limit foat Magnitude limit at which bright sources are identified. 10 Returns: Type Description numpy.ndarray Boolean mask with rejected pixels _model_bkg ( self , data , mask = None ) private BkgZoomInterpolator: This class generates full-sized background and background RMS images from lower-resolution mesh images using the ~scipy.ndimage.zoom (spline) interpolator. Parameters: Name Type Description Default data numpy.ndarray Data arra with the pixel flux values. required mask numpy.ndarray Boolean array to mask pixels with sources. None Returns: Type Description numpy.ndarray Data array with background model _saturated_pixels_mask ( self , flux , column , row , saturation_limit = 150000.0 ) private Finds and removes saturated pixels, including bleed columns. Parameters: Name Type Description Default flux numpu.ndarray Data array with pixel flux value required column numpy.ndarray Data array with pixel column value required row numpy.ndarray Data array with pixel row value required saturation_limit foat Saturation limit at which pixels are removed. 150000.0 Returns: Type Description numpy.ndarray Boolean mask with rejected pixels build_prf_model ( self , n_r_knots = 5 , n_phi_knots = 15 ) Function that creates a PRF shape using the sources. In combines all other helping functions that build the source mask, remove contaminated pixels, estimate PRF edges, and create the final PRF model. For details see: self._create_sparse() self._get_source_mask() self._get_uncontaminated_source_mask() self._build_prf_shape() Default parameters where used for Martinez-Palomera et al. 2021. Parameters: Name Type Description Default n_r_knots int Number of radial knots in the spline model. 5 n_phi_knots int Number of azimuthal knots in the spline model. 15 download_ffi ( fits_name ) staticmethod Download FFI fits file to a dedicated quarter directory Parameters: Name Type Description Default fits_name string Name of FFI fits file required fit_model ( self ) Function to fit the PRF model and do LFD photometry for the sources observed in the FFIs. plot_image ( self , ax = None , sources = False ) Function to plot the Full Frame Image and the Gaia Sources Parameters: Name Type Description Default ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None sources boolean Whether to overplot or not the source catalog False Returns: Type Description matplotlib.axes Matlotlib axis with the figure plot_pixel_masks ( self , ax = None ) Function to plot the mask used to reject saturated and bright pixels Parameters: Name Type Description Default ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None Returns: Type Description matplotlib.axes Matlotlib axis with the figure plot_prf_shape ( self ) Function to plot the PRF model in Cartesian and Polar coordinates save_model ( self , path = None ) Function to save the PRF model weights, number of knots for r and phy, and rmin and rmax to re-build the Design Matrix. The file is a csv table, that contain a multi-index column table. Rows are each channel, and columns are: [\"n_r_knots\", \"n_phi_knots\", \"rmin\", \"rmax\", ...prf_ws...] This file can be loaded as: pd.read_csv(fname, index_col=0, header=[0, 1]) Note: models with different number of knots lead to different number of weights, and ins necessary to create separete files to preserve the esctructure. Parameters: Name Type Description Default path string Path of the file None","title":"KeplerFFI"},{"location":"KeplerFFI/#documentation-for-keplerffi","text":"Class for loading Kepler's FFI files and compute PRF models out of them following the method discussed in Hedges et al. 2021 and Martinez-Palomera et al. 2021.","title":"Documentation for KeplerFFI"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.__init__","text":"Initialization of the KeplerFFI class Parameters: Name Type Description Default ffi_name str Name of the FFI file used to model the PRF profile. Either ffi_name or quarter can be provided. '' channel int Channel number of the FFI to be used to model the PRF. Valid values are between 1 and 84. 1 quarter int Number of the quarter that will be used to model the PRF. Either ffi_name or quarter can be provided, if quarter is provided, then all FFI files observed during the time window of that quarter will be used to model the PRF by averaging the images. Valid values are between 1 and 17. None plot bool Whether to clreate diagnostic plots or not. True save bool Whether to save the models or not. True Attributes: Name Type Description channel int Number of the quarter that will be used to model the PRF. quarter int Channel number of the FFI to be used to model the PRF. plot bool Boolean to create diagnostic plots. save bool Boolean to save models and figures. hdr dict Header dictionary of the FFI file. img numpy.ndarray Original FFI flux image in electros / sec. wcs astropy.WCS Object with the WCS solution of the image. col_2d numpy.ndarray Data array with the pixel column number in 2D row_2d numpy.ndarray Data array with the pixel row number in 2D ra_2d numpy.ndarray Data array with the pixel Right Ascension value in 2D, in degs dec_2d numpy.ndarray Data array with the pixel Declination value in 2D, in degs flux_2d numpy.ndarray Data array with the flux value of each pixel with substracted background in 2D, in electros / sec. sources pandas.DataFrame Catalog with Gaia sources observed in the image, after cleaning. flux numpy.ndarray Data array with the flux value of each pixel with substracted background in 1D after removing saturated & bright pixels. in electros / sec. flux_err numpy.ndarray Data array with the flux error value of each pixel with substracted background in 1D after removing saturated & bright pixels. in electros / sec. col numpy.ndarray Data array with the pixel column number in 1D after removing saturated & bright pixels row numpy.ndarray Data array with the pixel row number in 1D after removing saturated & bright pixels nsurces int Total number of sources observed in the image after cleaning. npixels int Total number of pixels in the image gf numpy.ndarray Data array with the Gaia flux value for every source. dflux scipy.sparse.csr_matrix Sparse matrix with pixel flux value within r < 7 pixels of the source coordinates. Has shape [nsources , npixels] dx scipy.sparse.csr_matrix Sparse matrix with distance between the pixel within r < 7 pixels and the source location, in pixel units. Has shape [nsources , npixels] dy scipy.sparse.csr_matrix Sparse matrix with distance between the pixel within r < 7 pixels and the source location, in pixel units. Has shape [nsources , npixels] r scipy.sparse.csr_matrix Sparse matrix with radial distance between pixels within r < 7 and the source location, in polar coordinates. Has shape [nsources , npixels] phi scipy.sparse.csr_matrix Sparse matrix with angle value of pixels within r < 7 and the source location, in polar coordinates. Has shape [nsources , npixels]","title":"__init__()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._build_prf_shape","text":"Builds a sparse model matrix of shape nsources x npixels to be used when fitting each source pixels to estimate its PSF photometry Parameters: Name Type Description Default n_r_knots int Number of radial knots in the spline model. 10 n_phi_knots int Number of azimuthal knots in the spline model. 12 cut_r int Distance at which the spline Design matrix has only dependency in the radial axis. 6 flux_cut_off float The flux in COUNTS at which to stop evaluating the model. 1","title":"_build_prf_shape()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._clean_source_list","text":"Function to clean surces from the catalog removing sources near the borders, with 10 pixel tolerance, and to remove blended sources (within 8\") Parameters: Name Type Description Default sources pandas.DataFrame Catalog with sources to be removed required Returns: Type Description pandas.DataFrame Clean catalog","title":"_clean_source_list()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._create_sparse","text":"Function to create sparse matrces (scipy.sparse.csr_matrix) for variables: dx, dy, dflux, dfluxerr, r, and phy This is extremelly necessary for FFI due to the large number of sources (~10k) and pixels (~1.1M). The sparse matrices contain the pixel data around the sources up to 7 pixels distance from the object location.","title":"_create_sparse()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._do_big_query","text":"Query Gaia catalogs (EDR3 default) to obtain sources observed in the FFI. If query finishs ok, result will be saved for future use in the following directory: ../data/catalogs/ffi/ /channel_ _gaia_xmatch.csv It does nx*ny small queries to avoid TimeoutError that might happen when doing large (rad > 0.7 deg) queries to Gaia archive. The ouput file has unique objects. Parameters: Name Type Description Default ra list Value of the Right Ascension coordinate used for the query, in deg. required dec list Value of the Declination coordinate used for the query, in deg. required epoch float Year of the observation (Julian year) used for proper motion correction. required Returns: Type Description pandas.DataFrame Clean catalog","title":"_do_big_query()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._get_mean_model","text":"Convenience function to make the scene PRF model","title":"_get_mean_model()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._get_source_mask","text":"Find the pixel mask that identifies pixels with contributions from ANY NUMBER of Sources. Fits a simple polynomial model to the log of the pixel flux values, in radial dimension and source flux, to find the optimum circular apertures for every source. Parameters: Name Type Description Default upper_radius_limit float The radius limit at which we assume there is no flux from a source of any brightness (arcsec). 7 lower_radius_limit float The radius limit at which we assume there is flux from a source of any brightness (arcsec). 1.1 flux_cut_off float The flux at which we assume a source is too faint to model 300 dm_type string Type of design matrix to be used for modeling. Default is rf-quadratic , which is quadratic in both radius and flux. 'rf-quadratic' plot bool Whether to show diagnostic plot. Default is False. False","title":"_get_source_mask()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._get_uncontaminated_source_mask","text":"creates a mask of shape nsources x npixels where targets are not contaminated. This mask is used to select pixels to build the PSF model.","title":"_get_uncontaminated_source_mask()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._mask_bright_sources","text":"Finds and removes halos produced by bright stars (<10 mag) Parameters: Name Type Description Default flux numpu.ndarray Data array with pixel flux value required column numpy.ndarray Data array with pixel column value required row numpy.ndarray Data array with pixel row value required sources pandas.DataFrame Catalog wih observed sources in the image required mag_limit foat Magnitude limit at which bright sources are identified. 10 Returns: Type Description numpy.ndarray Boolean mask with rejected pixels","title":"_mask_bright_sources()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._model_bkg","text":"BkgZoomInterpolator: This class generates full-sized background and background RMS images from lower-resolution mesh images using the ~scipy.ndimage.zoom (spline) interpolator. Parameters: Name Type Description Default data numpy.ndarray Data arra with the pixel flux values. required mask numpy.ndarray Boolean array to mask pixels with sources. None Returns: Type Description numpy.ndarray Data array with background model","title":"_model_bkg()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI._saturated_pixels_mask","text":"Finds and removes saturated pixels, including bleed columns. Parameters: Name Type Description Default flux numpu.ndarray Data array with pixel flux value required column numpy.ndarray Data array with pixel column value required row numpy.ndarray Data array with pixel row value required saturation_limit foat Saturation limit at which pixels are removed. 150000.0 Returns: Type Description numpy.ndarray Boolean mask with rejected pixels","title":"_saturated_pixels_mask()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.build_prf_model","text":"Function that creates a PRF shape using the sources. In combines all other helping functions that build the source mask, remove contaminated pixels, estimate PRF edges, and create the final PRF model. For details see: self._create_sparse() self._get_source_mask() self._get_uncontaminated_source_mask() self._build_prf_shape() Default parameters where used for Martinez-Palomera et al. 2021. Parameters: Name Type Description Default n_r_knots int Number of radial knots in the spline model. 5 n_phi_knots int Number of azimuthal knots in the spline model. 15","title":"build_prf_model()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.download_ffi","text":"Download FFI fits file to a dedicated quarter directory Parameters: Name Type Description Default fits_name string Name of FFI fits file required","title":"download_ffi()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.fit_model","text":"Function to fit the PRF model and do LFD photometry for the sources observed in the FFIs.","title":"fit_model()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.plot_image","text":"Function to plot the Full Frame Image and the Gaia Sources Parameters: Name Type Description Default ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None sources boolean Whether to overplot or not the source catalog False Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"plot_image()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.plot_pixel_masks","text":"Function to plot the mask used to reject saturated and bright pixels Parameters: Name Type Description Default ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"plot_pixel_masks()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.plot_prf_shape","text":"Function to plot the PRF model in Cartesian and Polar coordinates","title":"plot_prf_shape()"},{"location":"KeplerFFI/#kepler_apertures.KeplerFFI.KeplerFFI.save_model","text":"Function to save the PRF model weights, number of knots for r and phy, and rmin and rmax to re-build the Design Matrix. The file is a csv table, that contain a multi-index column table. Rows are each channel, and columns are: [\"n_r_knots\", \"n_phi_knots\", \"rmin\", \"rmax\", ...prf_ws...] This file can be loaded as: pd.read_csv(fname, index_col=0, header=[0, 1]) Note: models with different number of knots lead to different number of weights, and ins necessary to create separete files to preserve the esctructure. Parameters: Name Type Description Default path string Path of the file None","title":"save_model()"},{"location":"KeplerPRF/","text":"Documentation for TPFMachine Class to load PRF models computed from FFI, to create photometric apertures __init__ ( self , prf_ws , n_r_knots = 5 , n_phi_knots = 15 , rmin = 0.25 , rmax = 5 ) special A KeplerPRF object is build by providing the hyperparameters of the spline model, and the weights of each basis spline. The hyperparameters allow to reconstruct the same basis splines while the weights are used at evaluation of the model in new data. Parameters prf_ws : numpy.ndarray Weights corresponding to each basis of the design matrix. rmin : float The minimum radius for the PRF model to be fit. rmax : float The maximum radius for the PRF model to be fit. n_r_knots : int Number of radial knots in the spline model. n_phi_knots : int Number of azimuthal knots in the spline model. Attributes: Name Type Description prf_w numpy.ndarray Weights corresponding to each basis of the design matrix. rmin float The minimum radius for the PRF model to be fit. rmax float The maximum radius for the PRF model to be fit. n_r_knots int Number of radial knots in the spline model. n_phi_knots int Number of azimuthal knots in the spline model. compute_CROWDSAP ( psf_models , mask , idx ) staticmethod Compute the ratio of target flux relative to flux from all sources within the photometric aperture (i.e. 1 - Crowdeness). Parameters: Name Type Description Default psf_models numpy ndarray Array with the PSF models for all targets in the cutout. It has shape [n_sources, n_pixels]. required mask boolean array Array of boolean indicating the aperture for the target source. required idx int Index of the source to compute the metric. It has to be a number between 0 and psf_models.shape[0]. required Returns: Type Description float Crowdeness metric compute_FLFRCSAP ( psf_model , mask ) staticmethod Compute fraction of target flux enclosed in the optimal aperture to total flux for a given source (flux completeness). Parameters: Name Type Description Default psf_model numpy ndarray Array with the PSF model for the target source. It has shape [n_pixels] required mask boolean array Array of boolean indicating the aperture for the target source. required Returns: Type Description float Completeness metric create_aperture_mask ( self , psf_models , percentile = 0 , idx = None ) Function to create the aperture mask of a given source for a given aperture size. This function can compute aperutre mask for one or all sources available in the psf_models Parameters: Name Type Description Default psf_models scipy.sparse.csr_matrix Sparse matrix with the PSF models of all sources in the field. It has shape of [n_sources, n_pixels] required percentile float Percentile value that defines the isophote from the distribution of values in the psf model of the source 0 idx int Index of the source for which the metrcs will be computed. Has to be a number between 0 and psf_models.shape[0]. If None, then it computes the apertures for all sources in psf_models. None Returns: Type Description numpy.ndarray Boolean array with the aperture mask. diagnose_metrics ( self , psf_models , idx = 0 , ax = None , plot = True ) Function to evaluate the flux metrics for a single source as a function of the parameter that controls the aperture size. The flux metrics are computed by taking into account the PSF models of neighbor sources. This function is meant to be used only to generate the diagnostic or as a helping function of optimize_aperture() to precalculate the values of the metrics and find the optimal aperture in case of isolated sources, where the optimal is the full aperture. Parameters: Name Type Description Default psf_models scipy.sparse.csr_matrix Sparse matrix with the PSF models of all sources in the field. It has shape of [n_sources, n_pixels] required idx int Index of the source for which the metrcs will be computed. Has to be a number between 0 and psf_models.shape[0]. 0 ax matplotlib.axes Axis to be used to plot the figure None plot boolean Plot the metrics values. True Returns: Type Description matplotlib.axes Figure axes evaluate_PSF ( self , dx , dy ) Function to evaluate the PRF model in a grid of data. THe function returns a the prediction of the model as normalized flux. The model is evaluated in pixels up to r < 7 from the location of the source. Parameters: Name Type Description Default dx numpy.ndarray Distance between pixels (row direction) and source coordinates. required dx numpy.ndarray Distance between pixels (column direction) and source coordinates. required Returns: Type Description scipy.sparse.csr_matrix Normalized fluxvalues of the PRF model evaluation in the dx, dy grid load_from_file ( quarter = 5 , channel = 1 ) staticmethod Loads a PRF model build from Kepler's FFI for a given quarter and channel. Note: the file with the PRF models is csv file with a multiindex pandas DataFrame, the FITS version is in development. Parameters: Name Type Description Default channel int Channel number of the FFI to be used to model the PRF. Valid values are between 1 and 84. 1 quarter int Number of the quarter that will be used to model the PRF. Valid values are between 1 and 17. 5 Returns: Type Description KeplerPRF An object with the PRF model ready to be evaluated in new data. optimize_aperture ( self , psf_models , idx = 0 , target_complet = 0.9 , target_crowd = 0.9 , max_iter = 100 ) Function to optimize the aperture mask for a given source. There are two special cases: * Isolated sources, the optimal aperture is the full aperture. * If optimizing for one single metric. For these last two case, no actual optimization if performed, and we use the results from diagnose_metrics() . The optimization is done using scipy Brent's algorithm and it uses a custom loss function that uses a Leaky ReLU term to achive the target value for both metrics. Parameters: Name Type Description Default psf_models scipy.sparse.csr_matrix Sparse matrix with the PSF models of all sources in the field. It has shape of [n_sources, n_pixels] required idx int Index of the source for which the metrcs will be computed. Has to be a number between 0 and psf_models.shape[0]. If None, then it computes the apertures for all sources in psf_models. 0 target_complet float Value of the target completeness metric. 0.9 target_crowd float Value of the target crowdeness metric. 0.9 max_iter int Numer of maximum iterations to be performed by the optimizer. 100 Returns: Type Description numpy.ndarray Boolean array with the aperture mask. plot_aperture ( self , flux , mask = None , ax = None , log = False ) Function to plot the photometric aperture for a given source. Parameters: Name Type Description Default flux numpy.ndarray Data array with the flux image. required mask numpy.ndarray Boolean array with the aperture mask None log boolean Plot the image in log or linear scale. False ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"KeplerPRF"},{"location":"KeplerPRF/#documentation-for-tpfmachine","text":"Class to load PRF models computed from FFI, to create photometric apertures","title":"Documentation for TPFMachine"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.__init__","text":"A KeplerPRF object is build by providing the hyperparameters of the spline model, and the weights of each basis spline. The hyperparameters allow to reconstruct the same basis splines while the weights are used at evaluation of the model in new data. Parameters prf_ws : numpy.ndarray Weights corresponding to each basis of the design matrix. rmin : float The minimum radius for the PRF model to be fit. rmax : float The maximum radius for the PRF model to be fit. n_r_knots : int Number of radial knots in the spline model. n_phi_knots : int Number of azimuthal knots in the spline model. Attributes: Name Type Description prf_w numpy.ndarray Weights corresponding to each basis of the design matrix. rmin float The minimum radius for the PRF model to be fit. rmax float The maximum radius for the PRF model to be fit. n_r_knots int Number of radial knots in the spline model. n_phi_knots int Number of azimuthal knots in the spline model.","title":"__init__()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.compute_CROWDSAP","text":"Compute the ratio of target flux relative to flux from all sources within the photometric aperture (i.e. 1 - Crowdeness). Parameters: Name Type Description Default psf_models numpy ndarray Array with the PSF models for all targets in the cutout. It has shape [n_sources, n_pixels]. required mask boolean array Array of boolean indicating the aperture for the target source. required idx int Index of the source to compute the metric. It has to be a number between 0 and psf_models.shape[0]. required Returns: Type Description float Crowdeness metric","title":"compute_CROWDSAP()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.compute_FLFRCSAP","text":"Compute fraction of target flux enclosed in the optimal aperture to total flux for a given source (flux completeness). Parameters: Name Type Description Default psf_model numpy ndarray Array with the PSF model for the target source. It has shape [n_pixels] required mask boolean array Array of boolean indicating the aperture for the target source. required Returns: Type Description float Completeness metric","title":"compute_FLFRCSAP()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.create_aperture_mask","text":"Function to create the aperture mask of a given source for a given aperture size. This function can compute aperutre mask for one or all sources available in the psf_models Parameters: Name Type Description Default psf_models scipy.sparse.csr_matrix Sparse matrix with the PSF models of all sources in the field. It has shape of [n_sources, n_pixels] required percentile float Percentile value that defines the isophote from the distribution of values in the psf model of the source 0 idx int Index of the source for which the metrcs will be computed. Has to be a number between 0 and psf_models.shape[0]. If None, then it computes the apertures for all sources in psf_models. None Returns: Type Description numpy.ndarray Boolean array with the aperture mask.","title":"create_aperture_mask()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.diagnose_metrics","text":"Function to evaluate the flux metrics for a single source as a function of the parameter that controls the aperture size. The flux metrics are computed by taking into account the PSF models of neighbor sources. This function is meant to be used only to generate the diagnostic or as a helping function of optimize_aperture() to precalculate the values of the metrics and find the optimal aperture in case of isolated sources, where the optimal is the full aperture. Parameters: Name Type Description Default psf_models scipy.sparse.csr_matrix Sparse matrix with the PSF models of all sources in the field. It has shape of [n_sources, n_pixels] required idx int Index of the source for which the metrcs will be computed. Has to be a number between 0 and psf_models.shape[0]. 0 ax matplotlib.axes Axis to be used to plot the figure None plot boolean Plot the metrics values. True Returns: Type Description matplotlib.axes Figure axes","title":"diagnose_metrics()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.evaluate_PSF","text":"Function to evaluate the PRF model in a grid of data. THe function returns a the prediction of the model as normalized flux. The model is evaluated in pixels up to r < 7 from the location of the source. Parameters: Name Type Description Default dx numpy.ndarray Distance between pixels (row direction) and source coordinates. required dx numpy.ndarray Distance between pixels (column direction) and source coordinates. required Returns: Type Description scipy.sparse.csr_matrix Normalized fluxvalues of the PRF model evaluation in the dx, dy grid","title":"evaluate_PSF()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.load_from_file","text":"Loads a PRF model build from Kepler's FFI for a given quarter and channel. Note: the file with the PRF models is csv file with a multiindex pandas DataFrame, the FITS version is in development. Parameters: Name Type Description Default channel int Channel number of the FFI to be used to model the PRF. Valid values are between 1 and 84. 1 quarter int Number of the quarter that will be used to model the PRF. Valid values are between 1 and 17. 5 Returns: Type Description KeplerPRF An object with the PRF model ready to be evaluated in new data.","title":"load_from_file()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.optimize_aperture","text":"Function to optimize the aperture mask for a given source. There are two special cases: * Isolated sources, the optimal aperture is the full aperture. * If optimizing for one single metric. For these last two case, no actual optimization if performed, and we use the results from diagnose_metrics() . The optimization is done using scipy Brent's algorithm and it uses a custom loss function that uses a Leaky ReLU term to achive the target value for both metrics. Parameters: Name Type Description Default psf_models scipy.sparse.csr_matrix Sparse matrix with the PSF models of all sources in the field. It has shape of [n_sources, n_pixels] required idx int Index of the source for which the metrcs will be computed. Has to be a number between 0 and psf_models.shape[0]. If None, then it computes the apertures for all sources in psf_models. 0 target_complet float Value of the target completeness metric. 0.9 target_crowd float Value of the target crowdeness metric. 0.9 max_iter int Numer of maximum iterations to be performed by the optimizer. 100 Returns: Type Description numpy.ndarray Boolean array with the aperture mask.","title":"optimize_aperture()"},{"location":"KeplerPRF/#kepler_apertures.KeplerPRF.KeplerPRF.plot_aperture","text":"Function to plot the photometric aperture for a given source. Parameters: Name Type Description Default flux numpy.ndarray Data array with the flux image. required mask numpy.ndarray Boolean array with the aperture mask None log boolean Plot the image in log or linear scale. False ax matplotlib.axes Matlotlib axis can be provided, if not one will be created and returned None Returns: Type Description matplotlib.axes Matlotlib axis with the figure","title":"plot_aperture()"}]}